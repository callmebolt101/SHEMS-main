{"ast":null,"code":"var _jsxFileName = \"/Users/bolt/Desktop/SHEMS/frontend/src/components/CustomerDashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport '../CustomerDashboard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CustomerDashboard = () => {\n  _s();\n  const [customer, setCustomer] = useState(null);\n  const [devices, setDevices] = useState([]);\n  const [locations, setLocations] = useState([]);\n  useEffect(() => {\n    // Fetch customer details\n    fetch('http://localhost:8080/customers/1').then(response => response.json()).then(data => setCustomer(data)).catch(error => console.error('Error:', error));\n\n    // Fetch devices for customerId=1\n    fetch('http://localhost:8080/devices').then(response => response.json()).then(allDevices => {\n      const customerDevices = allDevices.filter(device => device.customerId === 1);\n      setDevices(customerDevices);\n\n      // Once we have the devices, fetch the locations for these devices\n      const locationIds = [...new Set(customerDevices.map(device => device.locationId))];\n      locationIds.forEach(locationId => {\n        fetch(`http://localhost:8080/locations/${locationId}`).then(response => response.json()).then(locationData => {\n          setLocations(prevLocations => [...prevLocations, locationData]);\n        }).catch(error => console.error('Error:', error));\n      });\n    }).catch(error => console.error('Error:', error));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n_s(CustomerDashboard, \"ysy06PDkhQP59POhnvdCO/HkE5o=\");\n_c = CustomerDashboard;\nexport default CustomerDashboard;\nvar _c;\n$RefreshReg$(_c, \"CustomerDashboard\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","CustomerDashboard","_s","customer","setCustomer","devices","setDevices","locations","setLocations","fetch","then","response","json","data","catch","error","console","allDevices","customerDevices","filter","device","customerId","locationIds","Set","map","locationId","forEach","locationData","prevLocations","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/bolt/Desktop/SHEMS/frontend/src/components/CustomerDashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport '../CustomerDashboard.css';\n\nconst CustomerDashboard = () => {\n  const [customer, setCustomer] = useState(null);\n  const [devices, setDevices] = useState([]);\n  const [locations, setLocations] = useState([]);\n\n  useEffect(() => {\n    // Fetch customer details\n    fetch('http://localhost:8080/customers/1')\n      .then(response => response.json())\n      .then(data => setCustomer(data))\n      .catch(error => console.error('Error:', error));\n\n    // Fetch devices for customerId=1\n    fetch('http://localhost:8080/devices')\n      .then(response => response.json())\n      .then(allDevices => {\n        const customerDevices = allDevices.filter(device => device.customerId === 1);\n        setDevices(customerDevices);\n        \n        // Once we have the devices, fetch the locations for these devices\n        const locationIds = [...new Set(customerDevices.map(device => device.locationId))];\n        locationIds.forEach(locationId => {\n          fetch(`http://localhost:8080/locations/${locationId}`)\n            .then(response => response.json())\n            .then(locationData => {\n              setLocations(prevLocations => [...prevLocations, locationData]);\n            })\n            .catch(error => console.error('Error:', error));\n        });\n      })\n      .catch(error => console.error('Error:', error));\n  }, []);\n\n  return (\n    <div className=\"dashboard\">\n      {/* ... */}\n      {/* Display customer details, devices, and locations */}\n    </div>\n  );\n};\n\nexport default CustomerDashboard;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC9B,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACU,SAAS,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAE9CC,SAAS,CAAC,MAAM;IACd;IACAW,KAAK,CAAC,mCAAmC,CAAC,CACvCC,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,IAAI,IAAIT,WAAW,CAACS,IAAI,CAAC,CAAC,CAC/BC,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC,CAAC;;IAEjD;IACAN,KAAK,CAAC,+BAA+B,CAAC,CACnCC,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACO,UAAU,IAAI;MAClB,MAAMC,eAAe,GAAGD,UAAU,CAACE,MAAM,CAACC,MAAM,IAAIA,MAAM,CAACC,UAAU,KAAK,CAAC,CAAC;MAC5Ef,UAAU,CAACY,eAAe,CAAC;;MAE3B;MACA,MAAMI,WAAW,GAAG,CAAC,GAAG,IAAIC,GAAG,CAACL,eAAe,CAACM,GAAG,CAACJ,MAAM,IAAIA,MAAM,CAACK,UAAU,CAAC,CAAC,CAAC;MAClFH,WAAW,CAACI,OAAO,CAACD,UAAU,IAAI;QAChChB,KAAK,CAAE,mCAAkCgB,UAAW,EAAC,CAAC,CACnDf,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACiB,YAAY,IAAI;UACpBnB,YAAY,CAACoB,aAAa,IAAI,CAAC,GAAGA,aAAa,EAAED,YAAY,CAAC,CAAC;QACjE,CAAC,CAAC,CACDb,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC,CAAC;MACnD,CAAC,CAAC;IACJ,CAAC,CAAC,CACDD,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC,CAAC;EACnD,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEf,OAAA;IAAK6B,SAAS,EAAC;EAAW;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAGrB,CAAC;AAEV,CAAC;AAAC/B,EAAA,CAvCID,iBAAiB;AAAAiC,EAAA,GAAjBjC,iBAAiB;AAyCvB,eAAeA,iBAAiB;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}